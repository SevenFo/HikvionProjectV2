#include <iostream>
#include "AudioFile.h"
#include "unsupported/Eigen/FFT"
#include "Eigen/Eigen"
#include "Eigen/Core"
#include "onnxruntime_cxx_api.h"
#include "CsvPraser.h"
#include "transforms.h"
#include "chrono"


//int64_t num_stft_bins(int64_t lengths, int64_t fft_length, int64_t hop_length, int64_t pad)
//{
//    return (lengths + 2 * pad - fft_length + hop_length)/hop_length;
//}





int crnn_main() {
    std::cout << "Hello, World!" << std::endl;
    Ort::Env env(ORT_LOGGING_LEVEL_WARNING, "test");
    Ort::SessionOptions session_options;
    session_options.SetIntraOpNumThreads(1);

    session_options.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_EXTENDED);
    Ort::AllocatorWithDefaultOptions allocator;


    const char* model_path = "../onnx_model_c7.onnx";

    Ort::Session session(env, model_path, session_options);
    auto n_input = session.GetInputCount();
    std::cout << "n_input:" << n_input;

    for(int index = 0;index<n_input;index++) {
        auto input_names = session.GetInputName(index, allocator);
        auto input_typeinfo = session.GetInputTypeInfo(index);
        auto input_shape = input_typeinfo.GetTensorTypeAndShapeInfo().GetShape();
        auto input_type = input_typeinfo.GetTensorTypeAndShapeInfo().GetElementType();
        std::cout<<";name["<<index<<"]:"<<input_names<<" type:"<<input_type<<" shape:";
        for(auto s : input_shape)
        {
            std::cout<<s<<",";
        }
    }
    std::cout<<std::endl;

    AudioFile<float> audioFile;

    const std::string metadata_path = "/home/siky/DATA/UrbanSound8K/metadata/UrbanSound8K.csv";
    const std::string base_path = "/home/siky/DATA/UrbanSound8K/";
    const std::string audios_path = base_path+"audio/audio_all/";

    CsvPraser metadata(metadata_path,',');

    auto data_infos = metadata.get_content();

    int total=0,correct = 0;


    for(auto begin = data_infos.begin();begin != data_infos.end();begin++)
    {
        auto item = *begin;
        auto load_start_t =  std::chrono::system_clock::now();
        audioFile.load(audios_path+(item)[0]);
//        audioFile.load(audios_path + "135160-8-0-0.wav");
        std::vector<std::vector<float>> samples = audioFile.samples;
        int sr = audioFile.getSampleRate(), length = audioFile.getNumSamplesPerChannel(),ch = audioFile.getNumChannels();
        if(length/sr <4)
            continue;
        std::cout<<"filename:"<<item[0]<<", sample rate:"<<audioFile.getSampleRate()<<", channel:"<<audioFile.getNumChannels()<<", samples:"<<audioFile.getNumSamplesPerChannel()<<std::endl;
        Vectorf data;
        if(ch == 1)
        {
            std::vector<float> ch1(audioFile.samples.at(0).begin(),audioFile.samples.at(0).end());
            data = Eigen::Map<Vectorf>(ch1.data(),length);
        }else
        {
            std::vector<float> ch1(audioFile.samples.at(0).begin(),audioFile.samples.at(0).end());
            std::vector<float> ch2(audioFile.samples.at(1).begin(),audioFile.samples.at(1).end());
            std::vector<std::vector<float>> audio_data;
            audio_data.push_back(ch1);
            audio_data.push_back(ch2);

            Matrixf audio_data_(ch,length);
            audio_data_.row(0) = Eigen::Map<Vectorf>(ch1.data(),length);
            audio_data_.row(1) = Eigen::Map<Vectorf>(ch2.data(),length);
            data = audio_data_.colwise().mean();
        }
        auto load_end_time =  std::chrono::system_clock::now();

        auto trans_start_t =  std::chrono::system_clock::now();
        Matrixf testsound_spec = mel_sepctrogram(data,sr);
        if(testsound_spec.cols() < 64)
            continue;
        //Given input size: (64x8x2). Calculated output size: (64x2x0). Output size is too small
        auto trans_end_t =  std::chrono::system_clock::now();

        auto inf_start_t =  std::chrono::system_clock::now();

        auto memory_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);

        std::vector<const char *> input_names{"input_data","input_time_length"};
        std::vector<const char *> output_names{"output_name"};

        size_t input_data_size = testsound_spec.cols()*testsound_spec.rows();
        std::vector<float> input_tensor_values(input_data_size,0.5);

        auto input_data_values = testsound_spec.data();
        std::vector<int64_t> input_data_dims = {1,1,testsound_spec.rows(),testsound_spec.cols()};

        std::vector<int64_t> input_data_length_values = std::vector<int64_t>{num_stft_bins(length,2048,1024,1024)};
        std::vector<int64_t> input_data_length_dims = std::vector<int64_t>{1};

        Ort::Value input_data = Ort::Value::CreateTensor<float>(memory_info, input_data_values, input_data_size, input_data_dims.data(), input_data_dims.size());
        Ort::Value input_data_length = Ort::Value::CreateTensor<int64_t>(memory_info, input_data_length_values.data(), input_data_length_values.size(), input_data_length_dims.data(),input_data_length_dims.size());

        std::vector<Ort::Value> inputs;
        inputs.push_back( std::move(input_data));
        inputs.push_back( std::move(input_data_length));
        auto output_tensors = session.Run(Ort::RunOptions{nullptr},input_names.data(),inputs.data(),inputs.size(),output_names.data(),output_names.size());
        auto output_typeinfo = output_tensors[0].GetTypeInfo().GetTensorTypeAndShapeInfo().GetShape();
        auto result = output_tensors[0].GetTensorMutableData<float>();
        Eigen::VectorXf net_result = Eigen::Map<Eigen::VectorXf>(result,10).array().exp();
        Eigen::VectorXf::Index max_index;
        auto m_result = net_result.maxCoeff(&max_index);
        auto inf_end_t =  std::chrono::system_clock::now();

        std::cout <<"result:"<<max_index<<":"<<m_result<<" correct:"<<item[6]<<std::endl;
//        for(int i =0;i<10;i++)
//            std::cout<<std::exp(result[i])<<",";
//        std::cout<<std::endl;
        total++;
        if(std::to_string(max_index).compare(item[6]) == 0)
            correct++;
        auto dur1 = std::chrono::duration_cast<std::chrono::duration<float>>(load_end_time - load_start_t);
        auto dur2 = std::chrono::duration_cast<std::chrono::duration<float>>( trans_end_t-trans_start_t);
        auto dur3 = std::chrono::duration_cast<std::chrono::duration<float>>(inf_end_t - inf_start_t);
        auto dur4 = std::chrono::duration_cast<std::chrono::duration<float>>(inf_end_t - load_start_t);

        std::cout<<"totle:"<<total<<" correct:"<<correct<<" rate:"<<(float)correct/total<<", load file take:"<<dur1.count()<<", mel trans take:"<<dur2.count()<<", inf take:"<<dur3.count()<<", totle take:"<<dur4.count()<< std::endl;
    }

    return 0;
}
/*
 *         std::vector<float> test_data = {0,1.0835e-07,4.30382e-07,9.61246e-07,1.68915e-06,2.59158e-06,3.61999e-06,4.87183e-06,6.38569e-06,8.04965e-06,9.78338e-06,1.16946e-05,1.36425e-05,1.59447e-05,1.84984e-05,2.09685e-05,2.35539e-05,2.5925e-05,2.90765e-05,3.18249e-05,3.51047e-05,3.88756e-05,4.19182e-05,4.49972e-05,4.85387e-05,5.17011e-05,5.56511e-05,5.94361e-05,6.30168e-05,6.66601e-05,7.02675e-05,7.43021e-05,7.75532e-05,8.1222e-05,8.44306e-05,8.84987e-05,9.46457e-05,9.78599e-05,0.000101558,0.000103421,0.00010695,0.000114286,0.000118593,0.00012357,0.000125558,0.000127474,0.000134027,0.000134761,0.000140545,0.000147398,0.000149611,0.000154618,0.000158694,0.000162629,0.000165362,0.000166977,0.000167024,0.000171631,0.00016998,0.000169144,0.000170786,0.000169316,0.000172006,0.000174456,0.000172105,0.000174181,0.000179718,0.00018342,0.000181802,0.000183422,0.000185076,0.000184611,0.000181671,0.000186731,0.000187748,0.000186199,0.000193445,0.000196427,0.00020132,0.000194671,0.000194575,0.000191945,0.000189004,0.000196077,0.000195513,0.000191657,0.000193526,0.000189111,0.000187653,0.000195024,0.000189867,0.000210034,0.000211324,0.000209126,0.000210465,0.000211396,0.000205324,0.000191484,0.000191658,0.000184035,0.000192017,0.000199842,0.000187484,0.000195303,0.000190995,0.000186019,0.000193947,0.000180072,0.000174293,0.00016863,0.000153204,0.000146336,0.000134241,0.000112568,0.000109468,0.000111377,9.75253e-05,8.4122e-05,6.42864e-05,5.98373e-05,4.95888e-05,5.04091e-05,3.96155e-05,3.48918e-05,2.34546e-05,0,-5.62971e-06,-4.3459e-05,-5.63331e-05,-6.36923e-05,-8.38321e-05,-0.000105171,-0.000146256,-0.000188537,-0.000239655,-0.000250289,-0.000274902,-0.000307453,-0.00031189,-0.000360771,-0.000403322,-0.000401283,-0.000422583,-0.000474701,-0.000528867,-0.000568046,-0.000599861,-0.000640767,-0.000666371,-0.000716767,-0.000752442,-0.000779214,-0.00082441,-0.000897807,-0.000945301,-0.000984473,-0.0010064,-0.00100955,-0.00104153,-0.00107407,-0.00110627,-0.00111986,-0.00114368,-0.00114727,-0.00117054,-0.0012056,-0.00126158,-0.00130881,-0.00137771,-0.00141485,-0.00145357,-0.00151445,-0.0015318,-0.00159333,-0.00170371,-0.00179157,-0.00183549,-0.00188003,-0.00194852,-0.0019946,-0.00205153,-0.00214832,-0.00223407,-0.00233299,-0.00239694,-0.00244867,-0.00251318,-0.0025664,-0.0026993,-0.00270109,-0.00278185,-0.00291983,-0.00299202,-0.00306391,-0.00310923,-0.00321196,-0.00327209,-0.0033194,-0.00335214,-0.00335471,-0.00341806,-0.00346669,-0.00350016,-0.0035796,-0.00366007,-0.00372697,-0.00374598,-0.00379757,-0.00388114,-0.00393393,-0.00405141,-0.00420757,-0.00434582,-0.00436815,-0.00449342,-0.00458679,-0.0046619,-0.00477361,-0.00488673,-0.00503609,-0.00511722,-0.00516205,-0.00526322,-0.00536382,-0.00544822,-0.00554917,-0.00569174,-0.00577924,-0.0058873,-0.00597485,-0.00606322,-0.00625345,-0.0063443,-0.00645839,-0.00651154,-0.00664651,-0.00674089,-0.00677437,-0.00687188,-0.00698987,-0.00704582,-0.00708203,-0.00720245,-0.00730181,-0.00735919,-0.00743937,-0.00760918,-0.00782475,-0.00793143,-0.00808354,-0.00816887,-0.00827629,-0.00838676,-0.0084741,-0.00858623,-0.00874364,-0.00878421,-0.00892366,-0.00911203,-0.00927727,-0.0095431,-0.00971236,-0.00991128,-0.0101076,-0.0101566,-0.0103821,-0.0105859,-0.010712,-0.0109706,-0.0111559,-0.0112342,-0.0113127,-0.011444,-0.0117681,-0.0119331,-0.012207,-0.012458,-0.012683,-0.0130197,-0.0131077,-0.0134553,-0.0137454,-0.0138935,-0.014075,-0.0142552,-0.0143493,-0.014562,-0.014746,-0.0149035,-0.0151211,-0.01525,-0.0152857,-0.0154152,-0.0155138,-0.0157691,-0.0159304,-0.0161279,-0.016516,-0.0167146,-0.0168519,-0.0170831,-0.0172889,-0.0173621,-0.0176007,-0.0178103,-0.0180524,-0.0181934,-0.0183758,-0.0186194,-0.0187313,-0.0186707,-0.0188496,-0.0190717,-0.0194255,-0.0196808,-0.0197635,-0.0200217,-0.0201751,-0.0203996,-0.0205547,-0.020636,-0.0208671,-0.021134,-0.0211787,-0.021299,-0.021608,-0.0216913,-0.0217003,-0.0216693,-0.0218259,-0.0218719,-0.0219173,-0.0221144,-0.0220792,-0.0221598,-0.0222808,-0.0224799,-0.0226837,-0.0227276,-0.0228499,-0.0229724,-0.0230533,-0.0232181,-0.0234222,-0.023546,-0.0238373,-0.0240054,-0.0242568,-0.0244702,-0.0245099,-0.0246807,-0.0248923,-0.0249799,-0.0250187,-0.0251464,-0.0251433,-0.0252255,-0.0253985,-0.0255721,-0.0257463,-0.0258751,-0.026004,-0.0261331,-0.0262582,-0.0264348,-0.0264743,-0.0266473,-0.0268729,-0.0269556,-0.0272312,-0.0274068,-0.027397,-0.0275775,-0.0275618,-0.0276931,-0.0277299,-0.0278113,-0.0281385,-0.0282251,-0.0284034,-0.0286378,-0.0285714,-0.0286013,-0.0288368,-0.0289697,-0.0290981,-0.0289794,-0.0289589,-0.0289851,-0.0288563,-0.0288851,-0.0290638,-0.0293554,-0.0292219,-0.0291896,-0.0295371,-0.0296083,-0.0295243,-0.0294988,-0.0296836,-0.029864,-0.0298875,-0.0300122,-0.0302037,-0.0304988,-0.0305731,-0.0308133,-0.0309502,-0.0310768,-0.0312666,-0.0314571,-0.0315898,-0.0317226,-0.0319091,-0.0317525,-0.0319494,-0.0321958,-0.0325085,-0.0328719,-0.0330728,-0.0332634,-0.033637,-0.0341347,-0.0345129,-0.03477,-0.0350957,-0.0350507,-0.0351346,-0.035275,-0.0355981,-0.0356764,-0.035691,-0.0358318,-0.0359148,-0.0359915,-0.0360036,-0.0363375,-0.0364786,-0.036809,-0.0370816,-0.0371587,-0.0373012,-0.0372517,-0.0373273,-0.0375357,-0.0375442,-0.0374238,-0.0374301,-0.037374,-0.0376493,-0.0377835,-0.0377314,-0.0380021,-0.0380736,-0.0382137,-0.0382847,-0.0385006,-0.0387045,-0.0388453,-0.0389157,-0.0389857,-0.0392678,-0.0395446,-0.0394786,-0.0394111,-0.0395448,-0.0393375,-0.0392661,-0.0395431,-0.03947,-0.0396016,-0.039453,-0.0394497,-0.0392977,-0.0392921,-0.0392788,-0.0394885,-0.0396239,-0.0396841,-0.0395998,-0.0394384,-0.039344,-0.0392551,-0.0390187,-0.0392891,-0.0393505,-0.0394045,-0.0393875,-0.0393625,-0.0391096,-0.0391601,-0.0392886,-0.0393456,-0.0393949,-0.0395951,-0.0394198,-0.039228,-0.0390487,-0.0385389,-0.0385818,-0.0385506,-0.0383564,-0.038552,-0.0385182,-0.0383197,-0.0382759,-0.0382386,-0.0384408,-0.0383194,-0.0383553,-0.0382314,-0.0382657,-0.0380478,-0.0380038,-0.03779,-0.0376511,-0.0378505,-0.0377173,-0.0379168,-0.0379452,-0.0379732,-0.0380006,-0.0380354,-0.0378094,-0.0379216,-0.0377798,-0.0377161,-0.0375716,-0.0371534,-0.0371817,-0.0367666,-0.0366069,-0.0361946,-0.0360392,-0.0356135,-0.0356258,-0.0354655,-0.0350409,-0.0349592,-0.0347939,-0.0348921,-0.0347245,-0.0349052,-0.0348274,-0.0344722,-0.0346521,-0.0344785,-0.0343035,-0.0341269,-0.0341187,-0.0344932,-0.0347752,-0.0347756,-0.0348699,-0.0349642,-0.0350585,-0.0352392,-0.0351514,-0.0350625,-0.0350599,-0.0350567,-0.0349652,-0.0349607,-0.0349556,-0.0351357,-0.035325,-0.0356125,-0.035803,-0.035994,-0.0361854,-0.0362785,-0.0364616,-0.0367534,-0.0369375,-0.0369407,-0.0374253,-0.0380122,-0.0381079,-0.0381027,-0.038593,-0.0389839,-0.0390901,-0.0394831,-0.0393765,-0.0391665,-0.039272,-0.0393587,-0.0392674,-0.0392501,-0.0393453,-0.0393459,-0.0392326,-0.0398389,-0.0398296,-0.0401248,-0.0404399,-0.0404209,-0.0403149,-0.040304,-0.0403022,-0.040184,-0.0403843,-0.0399539,-0.0398324,-0.0393002,-0.0390779,-0.0392656,-0.0391394,-0.0392385,-0.0392193,-0.0394071,-0.0394961,-0.039595,-0.039893,-0.0396629,-0.0394214,-0.0392986,-0.0390643,-0.0390398,-0.0390148,-0.0388881,-0.0386388,-0.0388348,-0.0388072,-0.0388913,-0.0383211,-0.0384036,-0.0385886,-0.0384551,-0.0384237,-0.0382883,-0.0383694,-0.0382221,-0.0381986,-0.0381536,-0.038129,-0.0384281,-0.0380571,-0.0376841,-0.037646,-0.0372698,-0.0372298,-0.0365114,-0.0360126,-0.0355113,-0.0351249,-0.0351956,-0.0346992,-0.0348759,-0.0349454,-0.0346705,-0.0347391,-0.0341161,-0.0335877,-0.0331871,-0.0329041,-0.0326197,-0.0322029,-0.0319153,-0.0316263,-0.0316871,-0.0310439,-0.0312134,-0.0311513,-0.031332,-0.0315131,-0.0312061,-0.031031,-0.0307213,-0.0307786,-0.0303548,-0.0301756,-0.0301078,-0.0296795,-0.0298465,-0.0296752,-0.0294804,-0.0298963,-0.0300638,-0.0298791,-0.0295682,-0.0294955,-0.0290565,-0.0289821,-0.028781,-0.0284639,-0.0285254,-0.0280794,-0.0282554,-0.0281656,-0.0280984,-0.0277637,-0.0276951,-0.0281153,-0.0279065,-0.0272057,-0.0267482,-0.0265352,-0.0263213,-0.0256121,-0.0252775,-0.0253196,-0.024841,-0.0246332,-0.0246737,-0.024203,-0.0242425,-0.0242819,-0.023939,-0.0235828,-0.0227219,-0.0219901,-0.0217607,-0.0215424,-0.0209132,-0.0201731,-0.0199386,-0.0191943,-0.0188238,-0.0184641,-0.0178352,-0.0173384,-0.016437,-0.0158017,-0.0150419,-0.0149298,-0.0146944,-0.0143227,-0.0141964,-0.0134277,-0.0127803,-0.0117347,-0.011219,-0.0105651,-0.0103195,-0.0101976,-0.00900293,-0.00875374,-0.00780345,-0.00728868,-0.00675984,-0.00622943,-0.00542076,-0.00528988,-0.00501986,-0.00476166,-0.00422445,-0.00341973,-0.00300592,-0.00232423,-0.00165337,-0.000955171,-0.000408095,0.000970543,0.00109973,0.00192072,0.00234642,0.0027604,0.00304691,0.00319255,0.00360925,0.00375597,0.00444585,0.00529279,0.00601232,0.00614982,0.00700214,0.00742735,0.00756705,0.00856775,0.00957092,0.0100013,0.0105767,0.0107341,0.0113117,0.0120351,0.0123262,0.0124862,0.0130685,0.0132163,0.0136686,0.0139629,0.0135556,0.0144341,0.0145974,0.0151731,0.0154972,0.015502,0.0159604,0.0162729,0.0165726,0.0161631,0.0158866,0.0157571,0.0156271,0.0156447,0.0159586,0.016273,0.0159942,0.016147,0.0161783,0.016345,0.0164984,0.0170998,0.0171183,0.0172863,0.0170189,0.0170233,0.0172051,0.0169227,0.0170909,0.0171087,0.0172634,0.0178847,0.0183425,0.0186498,0.0188201,0.0185362,0.0187202,0.0190288,0.0194897,0.0202556,0.0208707,0.0214869,0.0224092,0.0225836,0.0230361,0.023531,0.0241382,0.0253594,0.0258436,0.0267752,0.0270937,0.0278741,0.0281938,0.0289763,0.0299143,0.0308539,0.0313314,0.0313595,0.0328935,0.0333876,0.0337132,0.0342085,0.0351423,0.0362472,0.037184,0.0378248,0.0387783,0.0395771,0.0397666,0.0407093,0.0415111,0.0421574,0.0429612,0.0433099,0.0439586,0.045065,0.0461729,0.0474539,0.0484218,0.0492191,0.0500317,0.0508453,0.0515019,0.0520011,0.0528172,0.053476,0.0542938,0.054637,0.0559323,0.0561178,0.0571122,0.0582233,0.0590609,0.0603481,0.0610139,0.0616804,0.0618832,0.063015,0.0641626,0.0645119,0.0653414,0.0667976,0.0677892,0.0689276,0.0702275,0.0713829,0.0720574,0.0732001,0.0741976,0.0750204,0.0760196,0.0771808,0.0783283,0.0796383,0.0811108,0.0822617,0.0840601,0.085375,0.0865438,0.0878461,0.0886928,0.0898643,0.0913464,0.0928297,0.0936646,0.094367,0.0955278,0.0963789,0.0978667,0.0990299,0.0997346,0.101062,0.102227,0.103556,0.104738,0.106232,0.107237,0.107127,0.107671,0.108527,0.10922,0.110077,0.111084,0.111777,0.113112,0.11397,0.114515,0.115359,0.116068,0.117076,0.117771,0.118465,0.119654,0.120663,0.121208,0.121588,0.122762,0.123622,0.124632,0.125327,0.126517,0.128008,0.129364,0.131187,0.132379,0.133556,0.134749,0.135926,0.136772,0.137965,0.13964,0.140652,0.141845,0.143024,0.144368,0.145728,0.147238,0.148583,0.150094,0.151591,0.152951,0.154296,0.156625,0.158122,0.159482,0.160661,0.162022,0.163034,0.163727,0.164587,0.16528,0.166306,0.16765,0.168508,0.169351,0.169723,0.170246,0.171923,0.172293,0.173149,0.173837,0.175011,0.175546,0.176552,0.177086,0.177756,0.17911,0.179626,0.18063,0.181815,0.182497,0.183346,0.184195,0.184205,0.18423,0.184757,0.18545,0.1866,0.186636,0.187312,0.188308,0.18883,0.189839,0.190329,0.190681,0.19152,0.192191,0.05931,0.0599699,0.0601415,0.0604653,0.0611246,-6.18337e+32,-5.90481e+32,-5.90506e+32,0.0616231,-6.41496e+32,0.0629541,0.0632758,0.0634447,0.0637659,-4.25798e+32,-4.25799e+32,-4.25798e+32,0.0637659,0.0634447,0.0632758,0.0629541,-6.41496e+32,0.0616231,-5.90506e+32,-5.90481e+32,-6.18337e+32,0.0611246,0.0604653,0.0601415,0.0599699,0.05931,0.192191,0.19152,0.190681,0.190329,0.189839,0.18883,0.188308,0.187312,0.186636,0.1866,0.18545,0.184757,0.18423,0.184205,0.184195,0.183346,0.182497,0.181815,0.18063,0.179626,0.17911,0.177756,0.177086,0.176552,0.175546,0.175011,0.173837,0.173149,0.172293,0.171923,0.170246,0.169723,0.169351,0.168508,0.16765,0.166306,0.16528,0.164587,0.163727,0.163034,0.162022,0.160661,0.159482,0.158122,0.156625,0.154296,0.152951,0.15159,0.150094,0.148583,0.147238,0.145728,0.144368,0.143024,0.141845,0.140652,0.13964,0.137965,0.136772,0.135926,0.134749,0.133556,0.132379,0.131187,0.129364,0.128008,0.126517,0.125327,0.124632,0.123622,0.122762,0.121588,0.121208,0.120663,0.119654,0.118465,0.117771,0.117076,0.116068,0.115359,0.114515,0.11397,0.113112,0.111777,0.111084,0.110077,0.10922,0.108527,0.107671,0.107127,0.107237,0.106232,0.104738,0.103556,0.102227,0.101062,0.0997346,0.0990299,0.0978667,0.0963789,0.0955278,0.0943669,0.0936646,0.0928297,0.0913464,0.0898643,0.0886928,0.0878461,0.0865438,0.085375,0.0840601,0.0822617,0.0811108,0.0796383,0.0783283,0.0771808,0.0760196,0.0750204,0.0741976,0.0732001,0.0720574,0.0713829,0.0702275,0.0689276,0.0677892,0.0667976,0.0653414,0.0645119,0.0641626,0.063015,0.0618832,0.0616804,0.0610139,0.0603481,0.0590609,0.0582233,0.0571122,0.0561178,0.0559323,0.054637,0.0542938,0.053476,0.0528172,0.0520011,0.0515019,0.0508453,0.0500317,0.0492191,0.0484218,0.0474539,0.0461729,0.045065,0.0439586,0.0433099,0.0429612,0.0421574,0.0415111,0.0407093,0.0397666,0.0395771,0.0387783,0.0378248,0.037184,0.0362472,0.0351423,0.0342085,0.0337132,0.0333876,0.0328935,0.0313595,0.0313314,0.0308539,0.0299143,0.0289763,0.0281938,0.0278741,0.0270937,0.0267752,0.0258436,0.0253594,0.0241382,0.023531,0.0230361,0.0225836,0.0224092,0.0214869,0.0208707,0.0202556,0.0194897,0.0190288,0.0187202,0.0185362,0.0188201,0.0186498,0.0183425,0.0178847,0.0172634,0.0171087,0.0170909,0.0169227,0.0172051,0.0170233,0.0170189,0.0172863,0.0171183,0.0170998,0.0164984,0.016345,0.0161783,0.016147,0.0159942,0.016273,0.0159586,0.0156447,0.0156271,0.0157571,0.0158866,0.0161631,0.0165726,0.0162729,0.0159604,0.015502,0.0154972,0.0151731,0.0145974,0.0144341,0.0135556,0.0139629,0.0136686,0.0132163,0.0130685,0.0124862,0.0123262,0.0120351,0.0113117,0.0107341,0.0105767,0.0100013,0.00957092,0.00856775,0.00756705,0.00742735,0.00700214,0.00614982,0.00601232,0.00529279,0.00444585,0.00375597,0.00360925,0.00319255,0.00304691,0.0027604,0.00234642,0.00192072,0.00109973,0.000970543,-0.000408095,-0.000955171,-0.00165337,-0.00232423,-0.00300592,-0.00341973,-0.00422445,-0.00476166,-0.00501986,-0.00528988,-0.00542076,-0.00622943,-0.00675984,-0.00728868,-0.00780345,-0.00875374,-0.00900293,-0.0101976,-0.0103195,-0.0105651,-0.011219,-0.0117347,-0.0127803,-0.0134277,-0.0141964,-0.0143227,-0.0146943,-0.0149298,-0.0150419,-0.0158017,-0.016437,-0.0173384,-0.0178352,-0.018464,-0.0188238,-0.0191943,-0.0199386,-0.0201731,-0.0209132,-0.0215424,-0.0217607,-0.0219901,-0.0227219,-0.0235827,-0.023939,-0.0242819,-0.0242424,-0.0242029,-0.0246737,-0.0246332,-0.024841,-0.0253196,-0.0252775,-0.0256121,-0.0263213,-0.0265352,-0.0267482,-0.0272057,-0.0279065,-0.0281153,-0.0276951,-0.0277637,-0.0280984,-0.0281656,-0.0282554,-0.0280794,-0.0285254,-0.0284639,-0.028781,-0.0289821,-0.0290565,-0.0294955,-0.0295682,-0.0298791,-0.0300638,-0.0298963,-0.0294804,-0.0296752,-0.0298465,-0.0296795,-0.0301078,-0.0301756,-0.0303548,-0.0307786,-0.0307213,-0.031031,-0.0312061,-0.0315131,-0.031332,-0.0311513,-0.0312134,-0.0310439,-0.031687,-0.0316263,-0.0319153,-0.0322029,-0.0326197,-0.0329041,-0.0331871,-0.0335877,-0.0341161,-0.0347391,-0.0346704,-0.0349454,-0.0348759,-0.0346992,-0.0351956,-0.0351249,-0.0355113,-0.0360126,-0.0365114,-0.0372298,-0.0372697,-0.037646,-0.0376841,-0.0380571,-0.0384281,-0.038129,-0.0381536,-0.0381986,-0.0382221,-0.0383694,-0.0382883,-0.0384237,-0.0384551,-0.0385886,-0.0384036,-0.0383211,-0.0388913,-0.0388072,-0.0388348,-0.0386388,-0.0388881,-0.0390148,-0.0390398,-0.0390643,-0.0392986,-0.0394214,-0.0396629,-0.039893,-0.039595,-0.0394961,-0.0394071,-0.0392193,-0.0392385,-0.0391394,-0.0392656,-0.0390779,-0.0393002,-0.0398324,-0.0399539,-0.0403843,-0.040184,-0.0403022,-0.040304,-0.0403148,-0.0404209,-0.0404399,-0.0401248,-0.0398296,-0.0398389,-0.0392326,-0.0393459,-0.0393452,-0.0392501,-0.0392673,-0.0393587,-0.039272,-0.0391665,-0.0393765,-0.0394831,-0.0390901,-0.0389839,-0.038593,-0.0381027,-0.0381079,-0.0380122,-0.0374253,-0.0369407,-0.0369375,-0.0367534,-0.0364616,-0.0362785,-0.0361854,-0.035994,-0.035803,-0.0356125,-0.035325,-0.0351357,-0.0349556,-0.0349607,-0.0349652,-0.0350567,-0.0350599,-0.0350625,-0.0351514,-0.0352392,-0.0350585,-0.0349642,-0.0348699,-0.0347756,-0.0347752,-0.0344932,-0.0341187,-0.0341269,-0.0343035,-0.0344785,-0.034652,-0.0344722,-0.0348274,-0.0349052,-0.0347245,-0.0348921,-0.0347939,-0.0349592,-0.0350409,-0.0354655,-0.0356258,-0.0356135,-0.0360392,-0.0361946,-0.0366069,-0.0367666,-0.0371816,-0.0371534,-0.0375716,-0.0377161,-0.0377798,-0.0379216,-0.0378094,-0.0380354,-0.0380006,-0.0379732,-0.0379452,-0.0379168,-0.0377173,-0.0378505,-0.0376511,-0.03779,-0.0380038,-0.0380478,-0.0382657,-0.0382314,-0.0383553,-0.0383194,-0.0384408,-0.0382386,-0.0382759,-0.0383197,-0.0385182,-0.038552,-0.0383564,-0.0385506,-0.0385818,-0.0385389,-0.0390487,-0.039228,-0.0394198,-0.0395951,-0.0393949,-0.0393456,-0.0392886,-0.0391601,-0.0391095,-0.0393625,-0.0393875,-0.0394045,-0.0393505,-0.0392891,-0.0390187,-0.0392551,-0.039344,-0.0394383,-0.0395998,-0.0396841,-0.0396238,-0.0394885,-0.0392788,-0.0392921,-0.0392977,-0.0394497,-0.039453,-0.0396016,-0.03947,-0.0395431,-0.0392661,-0.0393375,-0.0395448,-0.0394111,-0.0394786,-0.0395446,-0.0392678,-0.0389857,-0.0389157,-0.0388453,-0.0387045,-0.0385006,-0.0382847,-0.0382137,-0.0380736,-0.0380021,-0.0377314,-0.0377835,-0.0376493,-0.037374,-0.0374301,-0.0374238,-0.0375442,-0.0375357,-0.0373273,-0.0372517,-0.0373012,-0.0371587,-0.0370816,-0.036809,-0.0364786,-0.0363375,-0.0360036,-0.0359915,-0.0359148,-0.0358318,-0.035691,-0.0356764,-0.0355981,-0.0352749,-0.0351346,-0.0350507,-0.0350957,-0.03477,-0.0345129,-0.0341347,-0.033637,-0.0332634,-0.0330728,-0.0328719,-0.0325085,-0.0321958,-0.0319494,-0.0317525,-0.0319091,-0.0317226,-0.0315898,-0.0314571,-0.0312666,-0.0310768,-0.0309502,-0.0308133,-0.0305731,-0.0304988,-0.0302037,-0.0300122,-0.0298875,-0.029864,-0.0296836,-0.0294988,-0.0295243,-0.0296083,-0.0295371,-0.0291896,-0.0292218,-0.0293554,-0.0290638,-0.028885,-0.0288563,-0.0289851,-0.0289588,-0.0289794,-0.029098,-0.0289697,-0.0288367,-0.0286013,-0.0285714,-0.0286378,-0.0284034,-0.0282251,-0.0281385,-0.0278112,-0.0277299,-0.0276931,-0.0275617,-0.0275775,-0.027397,-0.0274068,-0.0272311,-0.0269556,-0.0268729,-0.0266472,-0.0264743,-0.0264348,-0.0262582,-0.0261331,-0.026004,-0.025875,-0.0257463,-0.0255721,-0.0253985,-0.0252255,-0.0251433,-0.0251464,-0.0250187,-0.0249799,-0.0248923,-0.0246807,-0.0245099,-0.0244702,-0.0242568,-0.0240054,-0.0238373,-0.023546,-0.0234222,-0.0232181,-0.0230533,-0.0229724,-0.0228499,-0.0227275,-0.0226837,-0.0224799,-0.0222808,-0.0221598,-0.0220792,-0.0221144,-0.0219172,-0.0218718,-0.0218258,-0.0216693,-0.0217003,-0.0216913,-0.021608,-0.021299,-0.0211787,-0.021134,-0.0208671,-0.020636,-0.0205547,-0.0203996,-0.0201751,-0.0200217,-0.0197635,-0.0196808,-0.0194255,-0.0190717,-0.0188496,-0.0186707,-0.0187313,-0.0186194,-0.0183758,-0.0181934,-0.0180524,-0.0178103,-0.0176007,-0.0173621,-0.0172889,-0.0170831,-0.0168519,-0.0167146,-0.016516,-0.0161279,-0.0159304,-0.0157691,-0.0155138,-0.0154152,-0.0152857,-0.01525,-0.0151211,-0.0149035,-0.014746,-0.014562,-0.0143493,-0.0142552,-0.014075,-0.0138935,-0.0137454,-0.0134553,-0.0131077,-0.0130197,-0.012683,-0.012458,-0.012207,-0.0119331,-0.0117681,-0.011444,-0.0113127,-0.0112341,-0.0111559,-0.0109706,-0.010712,-0.0105859,-0.0103821,-0.0101566,-0.0101076,-0.00991127,-0.00971235,-0.0095431,-0.00927726,-0.00911202,-0.00892365,-0.0087842,-0.00874363,-0.00858622,-0.0084741,-0.00838675,-0.00827628,-0.00816886,-0.00808354,-0.00793143,-0.00782475,-0.00760918,-0.00743937,-0.00735919,-0.00730181,-0.00720245,-0.00708203,-0.00704582,-0.00698987,-0.00687188,-0.00677437,-0.00674089,-0.00664651,-0.00651154,-0.00645839,-0.0063443,-0.00625345,-0.00606322,-0.00597485,-0.0058873,-0.00577924,-0.00569173,-0.00554917,-0.00544822,-0.00536382,-0.00526322,-0.00516205,-0.00511722,-0.00503609,-0.00488672,-0.0047736,-0.00466189,-0.00458679,-0.00449342,-0.00436815,-0.00434581,-0.00420757,-0.0040514,-0.00393392,-0.00388113,-0.00379757,-0.00374598,-0.00372696,-0.00366007,-0.0035796,-0.00350015,-0.00346669,-0.00341805,-0.0033547,-0.00335214,-0.0033194,-0.00327208,-0.00321195,-0.00310923,-0.00306391,-0.00299202,-0.00291983,-0.00278185,-0.00270109,-0.0026993,-0.0025664,-0.00251318,-0.00244867,-0.00239694,-0.00233299,-0.00223407,-0.00214831,-0.00205153,-0.0019946,-0.00194852,-0.00188003,-0.00183549,-0.00179157,-0.00170371,-0.00159333,-0.0015318,-0.00151445,-0.00145357,-0.00141485,-0.00137771,-0.00130881,-0.00126158,-0.0012056,-0.00117054,-0.00114726,-0.00114367,-0.00111985,-0.00110627,-0.00107407,-0.00104153,-0.00100954,-0.0010064,-0.000984472,-0.0009453,-0.000897806,-0.000824409,-0.000779213,-0.00075244,-0.000716765,-0.00066637,-0.000640766,-0.00059986,-0.000568045,-0.000528867,-0.0004747,-0.000422582,-0.000401283,-0.000403321,-0.000360771,-0.000311891,-0.000307453,-0.000274902,-0.000250289,-0.000239655,-0.000188537,-0.000146256,-0.000105171,-8.38321e-05,-6.36923e-05,-5.6333e-05,-4.3459e-05,-5.62971e-06,0,2.34546e-05,3.48918e-05,3.96154e-05,5.04091e-05,4.95888e-05,5.98372e-05,6.42864e-05,8.4122e-05,9.75253e-05,0.000111377,0.000109468,0.000112568,0.000134241,0.000146336,0.000153204,0.00016863,0.000174293,0.000180072,0.000193947,0.000186019,0.000190994,0.000195302,0.000187484,0.000199842,0.000192017,0.000184034,0.000191657,0.000191483,0.000205324,0.000211395,0.000210465,0.000209125,0.000211323,0.000210033,0.000189867,0.000195024,0.000187652,0.00018911,0.000193526,0.000191656,0.000195512,0.000196077,0.000189004,0.000191946,0.000194575,0.000194671,0.00020132,0.000196427,0.000193445,0.000186199,0.000187748,0.000186731,0.00018167,0.000184611,0.000185076,0.000183422,0.000181802,0.00018342,0.000179718,0.00017418,0.000172104,0.000174456,0.000172006,0.000169316,0.000170785,0.000169144,0.000169979,0.00017163,0.000167024,0.000166977,0.000165361,0.000162628,0.000158693,0.000154618,0.000149611,0.000147397,0.000140545,0.00013476,0.000134026,0.000127473,0.000125558,0.000123569,0.000118593,0.000114286,0.00010695,0.000103421,0.000101557,9.7859e-05,9.46448e-05,8.84987e-05,8.44306e-05,8.1221e-05,7.75523e-05,7.43021e-05,7.02665e-05,6.66591e-05,6.30168e-05,5.94361e-05,5.56511e-05,5.17011e-05,4.85387e-05,4.49972e-05,4.19182e-05,3.88756e-05,3.51047e-05,3.18249e-05,2.90754e-05,2.5925e-05,2.35539e-05,2.09685e-05,1.84984e-05,1.59447e-05,1.36425e-05,1.16946e-05,9.78338e-06,8.04965e-06,6.38569e-06,4.87183e-06,3.61999e-06,2.59158e-06,1.68915e-06,9.61246e-07,4.30382e-07,1.0835e-07};
        Vectorf x_frame = Eigen::Map<Vectorf>(test_data.data(),test_data.size());
        std::cout<<"x_frame size:"<<x_frame.size()<<" result:";
        for(auto item: x_frame)
        {
            std::cout<<item<<",";
        }
        std::cout<<std::endl;
        Eigen::Matrix<std::complex<float>,1,Eigen::Dynamic> output;
        fft.fwd(output,x_frame,-1);
        std::cout<<"output size:"<<output.size()<<" result:";
        for(auto item: output)
        {
            std::cout<<item<<",";
        }
        std::cout<<std::endl;
 */
